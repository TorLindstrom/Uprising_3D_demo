
UPRISING DOCUMENTATION: TODO's

Order of business:
------------------
* introduce BigDecimal (or equivalent tricks for accuracy) and BufferedImage so that the final screen is actually correct and smoother
    * needed for certain angles to not freak the fuck out
* clean up you fool
* look into OpenGl or JOGL or DirectX for the first usages of hardware acceleration, specifically for matrices and ray calculations
---
* add user movement, mainly for easier testing of the darndest angles and positions
* test the movement system thoroughly
* the weirdest testing period you can imagine, searching out the most heinous of errors and logical conundrums
---
* make it update the screen at the actually correct time, not accurate right now, making it way more jagged
---
* try and add lighting, the basic kind, and with that shadows as a bi product
* test the lighting system thoroughly
* try and add ambient occlusion for funsies
* add the LOGGING feature for ease of speeding up
* test and check for optimizations like crazy
---
* add bounding boxes
* add bounding boxes viewing frustum culling
* separate this into it's own thread for quickies
* restrict player movement by use of bounding boxes (might introduce separate boxes for culling and for movement)
---
* try and add textures
* test, ofc
---
* try and add animations
* testing goes along with it, duh
---


General TODO's:
---------------
* MAKE MORE TESTS!
* break out code to be their own methods
* make equations objects to be manipulated and sent around, with related methods in the same class, very helpful for future use
* make it universal to use either Points OR double[] for positions, too mixed right now
  * same with angles, radians, or angles
* clean up equations and method flows trying to save some processing power
* look over access modifiers and encapsulation, also relationships between classes
* add a bufferedImage to be flushed, way smoother execution
* fix the update frequency, not accurate, and not giving the right frame rate

Frustum TODO's:
---------------
* make sure that every point conceivable is represented correctly, and make sure that all the shapes possible can all be represented properly
* make sure that FOV is always correctly used and modified

Renderer TODO's:
----------------
* look over the calculateFrames method, break out code into own methods, make more efficient
* make sure that I can't lose any data or any points while calculating

Math TODO's:
------------
* make createSecondRayPosition work properly, it needs to hit correctly at every possible point (introduce something like BigDecimals)
* make the camera able to move in any way possible without messing up the picture
* look over the FOV and lens equation, well needed, I NEED to know that it can handle anything

------------------------------------------------------------------------------------------------------------------------

WANTED TODO's:
--------------
* add shadows
* add ambient occlusion
* add antialiasing
* add movement
  * and add interactions and weapons
* add support for bounding boxes, needed if I want more complexity, check bounding boxes first, if not possible to see it, then don't calculate the rest of the object
  * easy way, create standing bounding boxes, with the naturally highest point being the top of the box, for example
  * hard way, try to make the bounding box as small as possible around the object while still being composed of 6 corner points, added benefit of not including objects to soon by making their profiles smaller
    * go by checking the lines, not panes, no warping and no duplicate checks
* add concurrency
  * split the rendering of pixels in half, one thread for each half, make sure they're synced
  * another thread for calculating bounding boxes on the move
  * another thread checking movement for next frame, projectiles and what not
* and/or use PARALLEL STREAMS for example for bounding box calculations and making them relative
* add a LOGGING feature to keep track of times it takes for different processes and then at the end of the run prints the gathered stats out to pinpoint the bottlenecks in speed
* add textures
  * and animated textures, such as snowfall, or water and fire effects, different texture files, active one depending on what time it is queried,
        or have a modifier changing by each time unit to shift the value to be got, having the same texture but the same point on plane would change what pixel to show
* camera filters and UIs
* add animations for object meshes, spinning and morphing for example, also butterflies
* add rollAngle so it can work, would be fun and cool, also necessary for flying perspective
* add a custom file system and methods for reading and importing shapes from files
* add an editor